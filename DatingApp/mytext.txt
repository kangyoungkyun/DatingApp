
기록 1.
//높이 제약조건
var inputsContainerViewHeightAnchor: NSLayoutConstraint?
var nameTextFieldHeightAnchor: NSLayoutConstraint?
var emailTextFieldHeightAnchor: NSLayoutConstraint?
var passwordTextFieldHeightAnchor: NSLayoutConstraint?



inputsContainerViewHeightAnchor = inputsContainerView.heightAnchor.constraint(equalToConstant: 150)
inputsContainerViewHeightAnchor?.isActive = true



nameTextFieldHeightAnchor = nameTextField.heightAnchor.constraint(equalTo: inputsContainerView.heightAnchor, multiplier: 1/3)
nameTextFieldHeightAnchor?.isActive = true



let containerHeight =  loginRegisterSegmentedControl.selectedSegmentIndex  == 0 ? 100 : 150
inputsContainerViewHeightAnchor?.constant = CGFloat(containerHeight)

//이름 필드 높이
nameTextFieldHeightAnchor?.isActive = false
nameTextFieldHeightAnchor = loginRegisterSegmentedControl.selectedSegmentIndex  == 0 ? nameTextField.heightAnchor.constraint(equalTo: inputsContainerView.heightAnchor, multiplier: 0) : nameTextField.heightAnchor.constraint(equalTo: inputsContainerView.heightAnchor, multiplier: 1/3)
nameTextFieldHeightAnchor?.isActive = true





기록 2.


if Auth.auth().currentUser?.uid == nil{
perform(#selector(handleLogout), with: nil, afterDelay: 0)
}


기록 3.
lazy var loginRegisterSegmentedControl:UISegmentedControl = {
let sc = UISegmentedControl(items: ["로그인","등록"])
sc.translatesAutoresizingMaskIntoConstraints = false
sc.tintColor = .white
sc.selectedSegmentIndex = 1
sc.addTarget(self, action: #selector(handleLoginRegisterChange), for: .valueChanged)
return sc
}()







기록 3. 이미지 캐쉬

import UIKit

let imageCache = NSCache<NSString, AnyObject>()

extension UIImageView{

//새 메시지 보내기 테이블 뷰에서 호출하는 이미지 캐쉬 함수
func loadImageUsingCacheWithUrlString(_ urlString: String) {
self.image = nil

//이미지 캐쉬가 있는지 확인 후 있으면 return
if let cachedImage = imageCache.object(forKey: urlString as NSString) as? UIImage {
self.image = cachedImage
return
}

//이미지 캐치가 없으면 다운로드
let url = URL(string: urlString)
URLSession.shared.dataTask(with: url!, completionHandler: { (data, response, error) in

//다운로드 중 에러발생, 종료
if let error = error {
print(error)
return
}

DispatchQueue.main.async(execute: {
//이미지 캐쉬에 넣기
if let downloadedImage = UIImage(data: data!) {
imageCache.setObject(downloadedImage, forKey: urlString as NSString)
self.image = downloadedImage
}
})

}).resume()
}

}


기록 4. 테이블 뷰 cell 레이아웃 조정하기


//테이블 뷰 셀 커스터 마이징
class UserCell: UITableViewCell {
//cell에 들어갈 이미지 객체 생성
let profileImageView: UIImageView = {
let imageView = UIImageView()
imageView.translatesAutoresizingMaskIntoConstraints = false
imageView.layer.cornerRadius = 24
imageView.layer.masksToBounds = true
imageView.contentMode = .scaleAspectFill
return imageView
}()

override init(style: UITableViewCellStyle, reuseIdentifier: String?) {
super.init(style: .subtitle, reuseIdentifier: reuseIdentifier)
addSubview(profileImageView)

profileImageView.leftAnchor.constraint(equalTo: self.leftAnchor, constant: 8).isActive = true
profileImageView.centerYAnchor.constraint(equalTo: self.centerYAnchor).isActive = true
profileImageView.widthAnchor.constraint(equalToConstant: 48).isActive = true
profileImageView.heightAnchor.constraint(equalToConstant: 48).isActive = true
}

override func layoutSubviews() {
super.layoutSubviews()

textLabel?.frame = CGRect(x: 64, y: textLabel!.frame.origin.y - 2, width: textLabel!.frame.width, height: textLabel!.frame.height)

detailTextLabel?.frame = CGRect(x: 64, y: detailTextLabel!.frame.origin.y + 2, width: detailTextLabel!.frame.width, height: detailTextLabel!.frame.height)
}

required init?(coder aDecoder: NSCoder) {
fatalError("init(coder:) has not been implemented")
}

}
