
기록 1.
//높이 제약조건
var inputsContainerViewHeightAnchor: NSLayoutConstraint?
var nameTextFieldHeightAnchor: NSLayoutConstraint?
var emailTextFieldHeightAnchor: NSLayoutConstraint?
var passwordTextFieldHeightAnchor: NSLayoutConstraint?



inputsContainerViewHeightAnchor = inputsContainerView.heightAnchor.constraint(equalToConstant: 150)
inputsContainerViewHeightAnchor?.isActive = true



nameTextFieldHeightAnchor = nameTextField.heightAnchor.constraint(equalTo: inputsContainerView.heightAnchor, multiplier: 1/3)
nameTextFieldHeightAnchor?.isActive = true



let containerHeight =  loginRegisterSegmentedControl.selectedSegmentIndex  == 0 ? 100 : 150
inputsContainerViewHeightAnchor?.constant = CGFloat(containerHeight)

//이름 필드 높이
nameTextFieldHeightAnchor?.isActive = false
nameTextFieldHeightAnchor = loginRegisterSegmentedControl.selectedSegmentIndex  == 0 ? nameTextField.heightAnchor.constraint(equalTo: inputsContainerView.heightAnchor, multiplier: 0) : nameTextField.heightAnchor.constraint(equalTo: inputsContainerView.heightAnchor, multiplier: 1/3)
nameTextFieldHeightAnchor?.isActive = true





기록 2.


if Auth.auth().currentUser?.uid == nil{
perform(#selector(handleLogout), with: nil, afterDelay: 0)
}


기록 3.
lazy var loginRegisterSegmentedControl:UISegmentedControl = {
let sc = UISegmentedControl(items: ["로그인","등록"])
sc.translatesAutoresizingMaskIntoConstraints = false
sc.tintColor = .white
sc.selectedSegmentIndex = 1
sc.addTarget(self, action: #selector(handleLoginRegisterChange), for: .valueChanged)
return sc
}()
